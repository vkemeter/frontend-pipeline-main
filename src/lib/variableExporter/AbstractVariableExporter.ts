import {VariableExportConfig, VariableValues} from '../../types/config/VariableConfig'
import * as dayjs from 'dayjs'
import {EOL} from 'os'

export abstract class AbstractVariableExporter {
    protected readonly VARIABLE_NAME: string
    protected readonly FILEPATH: string
    protected readonly TYPECAST?: string
    protected readonly ADDITIONAL?: string

    protected variablePrefix = ''
    protected variableSuffix = ''
    protected variableAssignment = ''
    protected mapStart = ''
    protected mapEnd = ''
    protected endWithSemicolon = false
    // protected indentSize = 0

    // private indentLevel = 1

    constructor ({
        name,
        file,
        typecast,
        additional
    }: VariableExportConfig) {
        this.VARIABLE_NAME = name
        this.FILEPATH = file
        this.TYPECAST = typecast
        this.ADDITIONAL = additional
    }

    async generate (target: VariableValues[]): Promise<void> {
        const fileContent = this.generateFileContent(target)
        this.saveFile(fileContent)
    };

    protected get variableName (): string {
        return this.VARIABLE_NAME
    }

    protected generateFileContent (target: VariableValues[]): string {
        let fileContent = ''

        fileContent += this.getFileBanner()
        fileContent += this.getVariableStart()
        Object.values(target).forEach(({ key, value }) => {
            console.log(key, value)
        })
        fileContent += this.getVariableEnd()

        return fileContent
    }

    protected getFileBanner (): string {
        const currentTimestamp = dayjs().format('DD.MM.YYYY HH:mm:ss')
        let content = ''

        content += `// ${this.FILEPATH}, autogenerated by supsevens frontend pipeline` + EOL
        content += `// created at: ${currentTimestamp}` + EOL
        content += EOL

        return content
    }

    protected getVariableStart (): string {
        let output = ''

        output += this.variablePrefix
        output += this.variableName
        output += this.variableSuffix
        if (this.variableAssignment) {
            output += ' ' + this.variableAssignment
        }
        output += ' ' + this.mapStart
        output += EOL

        return output
    }

    protected getVariableEnd (): string {
        let output = ''

        output += this.mapEnd
        if (this.endWithSemicolon) {
            output += ';'
        }
        output += EOL

        return output
    }

    private async saveFile (fileContent: string | Buffer): Promise<void> {
        console.log(fileContent)
    }

    public static get TARGET_EXPORT_KEY (): string {
        throw new Error('TARGET_EXPORT_KEY was not defined')
    };
}
